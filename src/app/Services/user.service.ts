import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, of, throwError } from 'rxjs';
import { delay, catchError } from 'rxjs/operators';
import { environment } from '../../environments/environment';
import { User } from '../interfaces/user.interface'; // Import User interface

// The payload for registration can directly use the User interface,
// but exclude 'id' as it's generated by the backend, and ensure password is included.
// We'll create a type alias for clarity.
type RegisterPayload = Omit<User, 'id'> & { password: string };


@Injectable({
  providedIn: 'root'
})
export class UserService {
  private registerApiUrl = `${environment.apiUrl}/api/tailors/register`; // Your backend registration endpoint

  constructor(private http: HttpClient) { }

  /**
   * Registers a new user account with specific details based on role.
   * @param userData The user's registration data, tailored by role.
   * @returns An Observable indicating success or failure.
   */
  register(userData: RegisterPayload): Observable<any> {
    // In a real application, you'd send this to your backend
    return this.http.post(this.registerApiUrl, userData).pipe(
      catchError(this.handleError)
    );

    // --- MOCK API CALL FOR DEMONSTRATION ---
    console.log(`Attempting to register new ${userData.role} (mock):`, userData);
    if (userData.username === 'testuser') {
      return throwError(() => new Error('Username or email already exists.')); // Simulate error
    }
    return of({ message: `${userData.role} account created successfully!`, userId: `new_${userData.role}_${Math.random().toString(36).substring(2, 9)}` }).pipe(delay(1000));
    // ----------------------------------------
  }

  private handleError(error: any): Observable<never> {
    console.error('An error occurred in UserService:', error);
    let errorMessage = 'An unexpected error occurred during registration. Please try again.';
    if (error.error && typeof error.error === 'string') {
      errorMessage = error.error;
    } else if (error.error && error.error.message) {
      errorMessage = error.error.message;
    } else if (error.status === 409) {
      errorMessage = 'Account already exists with this username or email.';
    }
    return throwError(() => new Error(errorMessage));
  }
}